
import javax.swing.*;
import java.awt.*;
import java.awt.geom.Line2D;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Dan
 */
class FileTools {

    String FileName;

    public String Open() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("./src"));
        FileNameExtensionFilter txt = new FileNameExtensionFilter("Text File(.txt)", "txt");
        FileNameExtensionFilter bin = new FileNameExtensionFilter("Bin File(.bin)", "bin");
        fileChooser.addChoosableFileFilter(txt);
        fileChooser.setFileFilter(txt);
        int response = fileChooser.showDialog(null, null);
        if (response == JFileChooser.APPROVE_OPTION) {
            FileName = fileChooser.getSelectedFile().getAbsolutePath();
        }
        return FileName;
    }
}

public class mainForm extends javax.swing.JFrame {

    Socket socket;

    ArrayList<Double> resList = new ArrayList<Double>();

    public class MyThread extends Thread {

        @Override
        public void run() {
            JFrame graphForm = new JFrame();
            graphForm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            GraphPanel graphPanel = new GraphPanel(1000, 1000, getAlignmentX(), getAlignmentY(), Integer.parseInt(inputXMin.getText()), Integer.parseInt(inputYMin.getText()), Integer.parseInt(inputXMax.getText()), Integer.parseInt(inputYMax.getText()), resList);
            graphPanel.setBorder(BorderFactory.createLineBorder(Color.black));
            graphForm.add(graphPanel);
            graphForm.setSize(1000, 1000);
            graphForm.setTitle("График функции");
            graphForm.setVisible(true);
        }
    }

    /**
     * Creates new form mainForm
     */
    public mainForm() throws IOException {
        socket = new Socket("localhost", 7777);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        funcLabel = new javax.swing.JLabel();
        inputFunc = new javax.swing.JTextField();
        xMinLabel = new javax.swing.JLabel();
        inputXMin = new javax.swing.JTextField();
        xMaxLabel = new javax.swing.JLabel();
        inputXMax = new javax.swing.JTextField();
        resButton = new javax.swing.JButton();
        yMinLabel = new javax.swing.JLabel();
        inputYMin = new javax.swing.JTextField();
        yMaxLabel = new javax.swing.JLabel();
        inputYMax = new javax.swing.JTextField();
        openGraph = new javax.swing.JButton();
        saveGraph = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Построение графика функции");
        setName("mainFrame"); // NOI18N
        setSize(new java.awt.Dimension(550, 160));

        funcLabel.setText("F(X) = ");
        funcLabel.setAlignmentX(0.5F);

        inputFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFuncActionPerformed(evt);
            }
        });

        xMinLabel.setText("X(min) = ");

        inputXMin.setText("-10");

        xMaxLabel.setText("X(max) = ");

        inputXMax.setText("10");

        resButton.setText("Result");
        resButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resButtonActionPerformed(evt);
            }
        });

        yMinLabel.setText("Y(min) = ");

        inputYMin.setText("-10");

        yMaxLabel.setText("Y(max) = ");

        inputYMax.setText("10");

        openGraph.setText("Open");
        openGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGraphActionPerformed(evt);
            }
        });

        saveGraph.setText("Save");
        saveGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xMaxLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(funcLabel))
                    .addComponent(xMinLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(inputFunc, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(saveGraph)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(inputXMax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(inputXMin, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(yMinLabel)
                                .addComponent(yMaxLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(inputYMin)
                                .addComponent(inputYMax, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openGraph)
                        .addGap(199, 199, 199)
                        .addComponent(resButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcLabel)
                    .addComponent(inputFunc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputXMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xMinLabel)
                    .addComponent(yMinLabel)
                    .addComponent(inputYMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputXMax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xMaxLabel)
                    .addComponent(yMaxLabel)
                    .addComponent(inputYMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openGraph)
                    .addComponent(saveGraph))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resButtonActionPerformed
        // TODO add your handling code here:
        if (!inputFunc.getText().isEmpty()) {
            String str = inputFunc.getText() + " 1000 1000 " + String.valueOf(1000 / (Integer.valueOf(inputXMax.getText()) - Integer.valueOf(inputXMin.getText()))) + " " + String.valueOf(1000 / (Integer.valueOf(inputYMax.getText()) - Integer.valueOf(inputYMin.getText())));

            try {
                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                oos.writeObject(str);
            } catch (IOException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
                resList = (ArrayList<Double>) ois.readObject();
                resList.forEach(System.out::println);

            } catch (IOException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            MyThread myThread = new MyThread();
            myThread.start();
        }
    }//GEN-LAST:event_resButtonActionPerformed

    private void inputFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFuncActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFuncActionPerformed

    private void openGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGraphActionPerformed
        // TODO add your handling code here:
        try {
            FileTools ft = new FileTools();
            String fileName = ft.Open();
            if (fileName != null) {
                FileInputStream fis = new FileInputStream(fileName);
                ObjectInputStream ois = new ObjectInputStream(fis);
                resList = (ArrayList) ois.readObject();
                if (!resList.isEmpty()) {
                    MyThread myThread = new MyThread();
                    myThread.start();
                }
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openGraphActionPerformed

    private void saveGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphActionPerformed
        // TODO add your handling code here:
        try {
            if (!resList.isEmpty()) {
                FileTools ft = new FileTools();
                String fileName = ft.Open() + ".txt";
                FileOutputStream fos = new FileOutputStream(fileName);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(resList);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveGraphActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new mainForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(mainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel funcLabel;
    private javax.swing.JTextField inputFunc;
    private javax.swing.JTextField inputXMax;
    private javax.swing.JTextField inputXMin;
    private javax.swing.JTextField inputYMax;
    private javax.swing.JTextField inputYMin;
    private javax.swing.JButton openGraph;
    private javax.swing.JButton resButton;
    private javax.swing.JButton saveGraph;
    private javax.swing.JLabel xMaxLabel;
    private javax.swing.JLabel xMinLabel;
    private javax.swing.JLabel yMaxLabel;
    private javax.swing.JLabel yMinLabel;
    // End of variables declaration//GEN-END:variables
}
